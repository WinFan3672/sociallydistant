#nullable enable
using System.Threading.Tasks;
using GameplaySystems.Hacking;
using Hacking;
using OS.Devices;
using UnityEngine;

namespace Architecture
{
	[CreateAssetMenu(menuName = "ScriptableObject/Assets/Exploit Command Asset")]
	public class ExploitCommandAsset : ScriptableCommandBase
	{
		[SerializeField]
		private ExploitScript exploitScript = null!;

		public IExploit? Exploit { get; set; }
		public IPayload? Payload { get; set; }

		/// <inheritdoc />
		public override async Task Main(ISystemProcess process, ITextConsole console, string[] arguments)
		{
			if (Exploit == null || (Exploit.RequiresPayload && Payload == null))
				return;
			
			// Disable the prefab first so Awake is deferred.
			exploitScript.gameObject.SetActive(false);
			ExploitScript instance = Instantiate(exploitScript);
			exploitScript.gameObject.SetActive(true);
			
			// Set the script exploit and payload
			instance.Setup(Exploit, Payload);
			
			// Wake the script up!
			instance.gameObject.SetActive(true);
			
			// Pass everything onto the script
			await instance.Main(process, console, arguments);
		}
	}
}