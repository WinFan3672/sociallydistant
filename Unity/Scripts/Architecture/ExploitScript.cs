#nullable enable
using System;
using GameplaySystems.Hacking;
using GameplaySystems.Networld;
using Hacking;
using OS.Devices;
using OS.Network;
using Utility;
using System.Threading.Tasks;

namespace Architecture
{
	public abstract class ExploitScript : CommandScript
	{
		private IExploit exploit;
		private IPayload? payload;
		private string host;
		private ushort port;
		private uint ip;
		
		public void Setup(IExploit exploit, IPayload? payload)
		{
			this.exploit = exploit;
			this.payload = payload;
		}

		private void Start()
		{
			
		}

		/// <inheritdoc />
		protected override async Task OnMain()
		{
			if (!GetHostAndPort(out host, out port))
			{
				PrintUsage();
				EndProcess();
				return;
			}

			if (payload == null && exploit.RequiresPayload)
			{
				Console.WriteLine("Corrupted binary!");
				EndProcess();
				return;
			}

			if (Network == null)
			{
				Console.WriteLine("No Internet connection");
				EndProcess();
				return;
			}

			if (!NetUtility.TryParseNetworkAddress(host, out ip))
			{
				Console.WriteLine("Malformed IP address");
				EndProcess();
				return;
			}

			if (Network == null)
				return;
				
			ConnectionResult connectionResult = await Network.Connect(ip, port);
			
			ConnectionResultCallback(connectionResult);
		}

		private void ConnectionResultCallback(ConnectionResult result)
		{
			if (result.Result == ConnectionResultType.Connected)
			{
				Exploit(result.Connection);
			}
			else
			{
				Console.WriteLine($"{host}:{port}: {result.Result}");
				EndProcess();
			}
		}

		private void Exploit(IConnection connection)
		{
			ServerInfo serverInfo = connection.ServerInfo;

			ISystemProcess? breachedProcess = serverInfo.Breach(exploit);
			if (breachedProcess == null)
			{
				EndProcess();
				return;
			}
			
			this.OnBreachSuccessful(breachedProcess);

			if (payload != null)
			{
				payload.Run(breachedProcess, Console);
			}
		}

		protected void PrintUsage()
		{
			Console.WriteLine($"{ProcessName}: usage: {ProcessName} <host> <port>");
		}
		
		protected virtual bool GetHostAndPort(out string host, out ushort port)
		{
			port = 0;
			host = string.Empty;

			if (!TryGetEnvironmentVariable("HOST", out host))
			{
				if (Arguments.Length != 2)
					return false;

				host = Arguments[0];
			}

			if (!TryGetEnvironmentVariable("PORT", out string portString))
			{
				if (Arguments.Length < 1 || Arguments.Length > 2)
					return false;

				portString = Arguments[^1];
			}

			if (!ushort.TryParse(portString, out port))
				return false;

			return true;
		}
		
		protected virtual void OnBreachSuccessful(ISystemProcess breachedProcess)
		{
			
		}
	}
}