using System;
using System.IO;
using System.Runtime.InteropServices.ComTypes;
using Core;
using Core.DataManagement;
using OS.Devices;
using OS.FileSystems;
using System.Threading.Tasks;

namespace GameplaySystems.Hacking
{
	public class CraftedExploitFile : IFileEntry
	{
		private ObjectId id;
		private IWorldManager world;
		
		/// <inheritdoc />
		public string Name { get; set; }

		public ExploitAsset Exploit { get; set; }
		public PayloadAsset Payload { get; set; }

		/// <inheritdoc />
		public IDirectoryEntry Parent => null;

		/// <inheritdoc />
		public bool CanExecute => Exploit != null;

		public CraftedExploitFile(IWorldManager world, ObjectId id)
		{
			this.world = world;
			this.id = id;
		}
		
		/// <inheritdoc />
		public bool TryDelete(IUser user)
		{
			world.World.CraftedExploits.Remove(world.World.CraftedExploits[id]);
			return true;
		}

		/// <inheritdoc />
		public bool TryOpenRead(IUser user, out Stream stream)
		{
			stream = Stream.Null;
			return false;
		}

		/// <inheritdoc />
		public bool TryOpenWrite(IUser user, out Stream stream)
		{
			stream = Stream.Null;
			return false;
		}

		/// <inheritdoc />
		public bool TryOpenWriteAppend(IUser user, out Stream stream)
		{
			stream = Stream.Null;
			return false;
		}

		/// <inheritdoc />
		public async Task<bool> TryExecute(ISystemProcess process, ITextConsole console, string[] arguments)
		{
			if (Exploit == null)
				return false;

			process.Name = this.Name;
			
			await Exploit.Run(process, console, arguments, Payload);
			return true;
		}
	}
}