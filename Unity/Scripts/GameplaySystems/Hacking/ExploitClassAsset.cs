#nullable enable
using System;
using System.Linq;
using GameplaySystems.Networld;
using OS.Network;
using UnityEngine;

namespace GameplaySystems.Hacking
{
	[CreateAssetMenu(menuName = "ScriptableObject/Assets/Exploit Class")]
	public class ExploitClassAsset : ScriptableObject
	{
		[Range(0, 100)]
		[SerializeField]
		private int effectiveness;

		[SerializeField]
		private ServerTypeFlags effectiveAgainst;
		
		public bool IsEffective(SecurityLevel secLevel)
		{
			// Get an int representation of the sec level
			var rawSecLevel = (int) secLevel;
			
			// Divide by the max security level to get the difficulty level we need to beat.
			float difficultyLevel = rawSecLevel / (float) Enum.GetValues(typeof(SecurityLevel)).Cast<int>()
				.Max();
			
			// Get our own effectiveness level as a float
			float effectivenessLevel = effectiveness / 100f;
			
			// If we're more effective, then we ARE effective.
			if (effectivenessLevel > difficultyLevel)
				return true;

			float chance = 0.98f * difficultyLevel * effectivenessLevel;

			float attempt = UnityEngine.Random.Range(0f, 1f);

			return attempt < chance;
		}

		public bool CanAttack(ServerType serverType)
		{
			return ((uint) effectiveAgainst & (uint) (1u << ((int)serverType) - 1)) != 0;
		}
	}
}