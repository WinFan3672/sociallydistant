#nullable enable

using SociallyDistant.Architecture;
using SociallyDistant.Core.Core;
using SociallyDistant.Core.Hacking;
using SociallyDistant.Core.OS.Devices;
using SociallyDistant.Core.OS.Network;

namespace SociallyDistant.GameplaySystems.Hacking
{
	public class ExploitAsset : IExploit
	{
		
		private string exploitName;

		
		private bool requiresPayload;

		
		private ExploitClassAsset exploitClass = null!;
		
		
		private ExploitCommandAsset exploitCommand = null!;
		
		/// <inheritdoc />
		public string Name => exploitName;

		public bool RequiresPayload => requiresPayload;

		public async Task Run(ISystemProcess process, ITextConsole console, string[] arguments, IPayload? payload)
		{
			if (this.exploitCommand == null)
			{
				process.Kill();
				return;
			}
			
			this.exploitCommand.Exploit = this;
			this.exploitCommand.Payload = payload;
			await this.exploitCommand.Main(process, console, arguments);
		}

		public bool CanAttack(ServerType serverType, SecurityLevel secLevel)
		{
			if (this.exploitClass == null)
				return false;

			return this.exploitClass.IsEffective(secLevel)
			       && this.exploitClass.CanAttack(serverType);
		}
		
		/// <inheritdoc />
		public bool IsUnlocked(ISkillTree skills)
		{
			return true;
		}

		/// <inheritdoc />
		public bool CanUnlock(ISkillTree skills)
		{
			throw new System.NotImplementedException();
		}

		/// <inheritdoc />
		public bool Unlock(ISkillTree skills)
		{
			throw new System.NotImplementedException();
		}
	}
}