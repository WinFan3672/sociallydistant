#nullable enable
using System.Collections;
using Microsoft.Xna.Framework.Input;
using SociallyDistant.Architecture;
using SociallyDistant.Core.Core;
using SociallyDistant.Core.Core.WorldData.Data;
using SociallyDistant.Core.Hacking;
using SociallyDistant.Core.Modules;
using SociallyDistant.Core.OS.Tasks;
using SociallyDistant.GameplaySystems.Hacking;

namespace SociallyDistant.Commands.Hacking
{
	[Command("craft")]
	public class ExploitCraftingCommand : ScriptableCommand
	{
		private string? exploitName;
		private string? payloadName;
		private bool showExploitSelect;
		private bool showPayloadSelect;
		private string[] availableExploitNames ;
		private string[] availablePayloadNames;
		private bool hasRun = false;
		
		/// <inheritdoc />
		protected override async Task OnExecute()
		{
			this.availableExploitNames = Array.Empty<IExploit>()
				.Select(x => x.Name)
				.Where(x => FileSystem.FileExists(PathUtility.Combine("usr", "lib", "exploits", x)))
				.ToArray();
			this.availablePayloadNames = Array.Empty<IPayload>()
				.Select(x => x.Name)
				.Where(x => FileSystem.FileExists(PathUtility.Combine("usr", "lib", "payloads", x)))
				.ToArray();
			
			// TODO: Reimplement this. Heavy use of Unity coroutines I don't feel like porting right now.
		}

		public ExploitCraftingCommand(IGameContext gameContext) : base(gameContext)
		{
		}
	}
}